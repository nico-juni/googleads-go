// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.18.1
// source: google/ads/googleads/v10/common/keyword_plan_common.proto

package common

import (
	proto "github.com/golang/protobuf/proto"
	enums "github.com/nico-juni/googleads-go/v10/pb/enums"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type KeywordPlanHistoricalMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvgMonthlySearches     *int64                                                            `protobuf:"varint,7,opt,name=avg_monthly_searches,json=avgMonthlySearches,proto3,oneof" json:"avg_monthly_searches,omitempty"`
	MonthlySearchVolumes   []*MonthlySearchVolume                                            `protobuf:"bytes,6,rep,name=monthly_search_volumes,json=monthlySearchVolumes,proto3" json:"monthly_search_volumes,omitempty"`
	Competition            enums.KeywordPlanCompetitionLevelEnum_KeywordPlanCompetitionLevel `protobuf:"varint,2,opt,name=competition,proto3,enum=google.ads.googleads.v10.enums.KeywordPlanCompetitionLevelEnum_KeywordPlanCompetitionLevel" json:"competition,omitempty"`
	CompetitionIndex       *int64                                                            `protobuf:"varint,8,opt,name=competition_index,json=competitionIndex,proto3,oneof" json:"competition_index,omitempty"`
	LowTopOfPageBidMicros  *int64                                                            `protobuf:"varint,9,opt,name=low_top_of_page_bid_micros,json=lowTopOfPageBidMicros,proto3,oneof" json:"low_top_of_page_bid_micros,omitempty"`
	HighTopOfPageBidMicros *int64                                                            `protobuf:"varint,10,opt,name=high_top_of_page_bid_micros,json=highTopOfPageBidMicros,proto3,oneof" json:"high_top_of_page_bid_micros,omitempty"`
}

func (x *KeywordPlanHistoricalMetrics) Reset() {
	*x = KeywordPlanHistoricalMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v10_common_keyword_plan_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeywordPlanHistoricalMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeywordPlanHistoricalMetrics) ProtoMessage() {}

func (x *KeywordPlanHistoricalMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v10_common_keyword_plan_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeywordPlanHistoricalMetrics.ProtoReflect.Descriptor instead.
func (*KeywordPlanHistoricalMetrics) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v10_common_keyword_plan_common_proto_rawDescGZIP(), []int{0}
}

func (x *KeywordPlanHistoricalMetrics) GetAvgMonthlySearches() int64 {
	if x != nil && x.AvgMonthlySearches != nil {
		return *x.AvgMonthlySearches
	}
	return 0
}

func (x *KeywordPlanHistoricalMetrics) GetMonthlySearchVolumes() []*MonthlySearchVolume {
	if x != nil {
		return x.MonthlySearchVolumes
	}
	return nil
}

func (x *KeywordPlanHistoricalMetrics) GetCompetition() enums.KeywordPlanCompetitionLevelEnum_KeywordPlanCompetitionLevel {
	if x != nil {
		return x.Competition
	}
	return enums.KeywordPlanCompetitionLevelEnum_UNSPECIFIED
}

func (x *KeywordPlanHistoricalMetrics) GetCompetitionIndex() int64 {
	if x != nil && x.CompetitionIndex != nil {
		return *x.CompetitionIndex
	}
	return 0
}

func (x *KeywordPlanHistoricalMetrics) GetLowTopOfPageBidMicros() int64 {
	if x != nil && x.LowTopOfPageBidMicros != nil {
		return *x.LowTopOfPageBidMicros
	}
	return 0
}

func (x *KeywordPlanHistoricalMetrics) GetHighTopOfPageBidMicros() int64 {
	if x != nil && x.HighTopOfPageBidMicros != nil {
		return *x.HighTopOfPageBidMicros
	}
	return 0
}

type HistoricalMetricsOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YearMonthRange *YearMonthRange `protobuf:"bytes,1,opt,name=year_month_range,json=yearMonthRange,proto3,oneof" json:"year_month_range,omitempty"`
}

func (x *HistoricalMetricsOptions) Reset() {
	*x = HistoricalMetricsOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v10_common_keyword_plan_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricalMetricsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalMetricsOptions) ProtoMessage() {}

func (x *HistoricalMetricsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v10_common_keyword_plan_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalMetricsOptions.ProtoReflect.Descriptor instead.
func (*HistoricalMetricsOptions) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v10_common_keyword_plan_common_proto_rawDescGZIP(), []int{1}
}

func (x *HistoricalMetricsOptions) GetYearMonthRange() *YearMonthRange {
	if x != nil {
		return x.YearMonthRange
	}
	return nil
}

type MonthlySearchVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year            *int64                            `protobuf:"varint,4,opt,name=year,proto3,oneof" json:"year,omitempty"`
	Month           enums.MonthOfYearEnum_MonthOfYear `protobuf:"varint,2,opt,name=month,proto3,enum=google.ads.googleads.v10.enums.MonthOfYearEnum_MonthOfYear" json:"month,omitempty"`
	MonthlySearches *int64                            `protobuf:"varint,5,opt,name=monthly_searches,json=monthlySearches,proto3,oneof" json:"monthly_searches,omitempty"`
}

func (x *MonthlySearchVolume) Reset() {
	*x = MonthlySearchVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v10_common_keyword_plan_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonthlySearchVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthlySearchVolume) ProtoMessage() {}

func (x *MonthlySearchVolume) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v10_common_keyword_plan_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthlySearchVolume.ProtoReflect.Descriptor instead.
func (*MonthlySearchVolume) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v10_common_keyword_plan_common_proto_rawDescGZIP(), []int{2}
}

func (x *MonthlySearchVolume) GetYear() int64 {
	if x != nil && x.Year != nil {
		return *x.Year
	}
	return 0
}

func (x *MonthlySearchVolume) GetMonth() enums.MonthOfYearEnum_MonthOfYear {
	if x != nil {
		return x.Month
	}
	return enums.MonthOfYearEnum_UNSPECIFIED
}

func (x *MonthlySearchVolume) GetMonthlySearches() int64 {
	if x != nil && x.MonthlySearches != nil {
		return *x.MonthlySearches
	}
	return 0
}

type KeywordPlanAggregateMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggregateMetricTypes []enums.KeywordPlanAggregateMetricTypeEnum_KeywordPlanAggregateMetricType `protobuf:"varint,1,rep,packed,name=aggregate_metric_types,json=aggregateMetricTypes,proto3,enum=google.ads.googleads.v10.enums.KeywordPlanAggregateMetricTypeEnum_KeywordPlanAggregateMetricType" json:"aggregate_metric_types,omitempty"`
}

func (x *KeywordPlanAggregateMetrics) Reset() {
	*x = KeywordPlanAggregateMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v10_common_keyword_plan_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeywordPlanAggregateMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeywordPlanAggregateMetrics) ProtoMessage() {}

func (x *KeywordPlanAggregateMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v10_common_keyword_plan_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeywordPlanAggregateMetrics.ProtoReflect.Descriptor instead.
func (*KeywordPlanAggregateMetrics) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v10_common_keyword_plan_common_proto_rawDescGZIP(), []int{3}
}

func (x *KeywordPlanAggregateMetrics) GetAggregateMetricTypes() []enums.KeywordPlanAggregateMetricTypeEnum_KeywordPlanAggregateMetricType {
	if x != nil {
		return x.AggregateMetricTypes
	}
	return nil
}

type KeywordPlanAggregateMetricResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceSearches []*KeywordPlanDeviceSearches `protobuf:"bytes,1,rep,name=device_searches,json=deviceSearches,proto3" json:"device_searches,omitempty"`
}

func (x *KeywordPlanAggregateMetricResults) Reset() {
	*x = KeywordPlanAggregateMetricResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v10_common_keyword_plan_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeywordPlanAggregateMetricResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeywordPlanAggregateMetricResults) ProtoMessage() {}

func (x *KeywordPlanAggregateMetricResults) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v10_common_keyword_plan_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeywordPlanAggregateMetricResults.ProtoReflect.Descriptor instead.
func (*KeywordPlanAggregateMetricResults) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v10_common_keyword_plan_common_proto_rawDescGZIP(), []int{4}
}

func (x *KeywordPlanAggregateMetricResults) GetDeviceSearches() []*KeywordPlanDeviceSearches {
	if x != nil {
		return x.DeviceSearches
	}
	return nil
}

type KeywordPlanDeviceSearches struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device      enums.DeviceEnum_Device `protobuf:"varint,1,opt,name=device,proto3,enum=google.ads.googleads.v10.enums.DeviceEnum_Device" json:"device,omitempty"`
	SearchCount *int64                  `protobuf:"varint,2,opt,name=search_count,json=searchCount,proto3,oneof" json:"search_count,omitempty"`
}

func (x *KeywordPlanDeviceSearches) Reset() {
	*x = KeywordPlanDeviceSearches{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v10_common_keyword_plan_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeywordPlanDeviceSearches) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeywordPlanDeviceSearches) ProtoMessage() {}

func (x *KeywordPlanDeviceSearches) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v10_common_keyword_plan_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeywordPlanDeviceSearches.ProtoReflect.Descriptor instead.
func (*KeywordPlanDeviceSearches) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v10_common_keyword_plan_common_proto_rawDescGZIP(), []int{5}
}

func (x *KeywordPlanDeviceSearches) GetDevice() enums.DeviceEnum_Device {
	if x != nil {
		return x.Device
	}
	return enums.DeviceEnum_UNSPECIFIED
}

func (x *KeywordPlanDeviceSearches) GetSearchCount() int64 {
	if x != nil && x.SearchCount != nil {
		return *x.SearchCount
	}
	return 0
}

type KeywordAnnotations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Concepts []*KeywordConcept `protobuf:"bytes,1,rep,name=concepts,proto3" json:"concepts,omitempty"`
}

func (x *KeywordAnnotations) Reset() {
	*x = KeywordAnnotations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v10_common_keyword_plan_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeywordAnnotations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeywordAnnotations) ProtoMessage() {}

func (x *KeywordAnnotations) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v10_common_keyword_plan_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeywordAnnotations.ProtoReflect.Descriptor instead.
func (*KeywordAnnotations) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v10_common_keyword_plan_common_proto_rawDescGZIP(), []int{6}
}

func (x *KeywordAnnotations) GetConcepts() []*KeywordConcept {
	if x != nil {
		return x.Concepts
	}
	return nil
}

type KeywordConcept struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ConceptGroup *ConceptGroup `protobuf:"bytes,2,opt,name=concept_group,json=conceptGroup,proto3" json:"concept_group,omitempty"`
}

func (x *KeywordConcept) Reset() {
	*x = KeywordConcept{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v10_common_keyword_plan_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeywordConcept) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeywordConcept) ProtoMessage() {}

func (x *KeywordConcept) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v10_common_keyword_plan_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeywordConcept.ProtoReflect.Descriptor instead.
func (*KeywordConcept) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v10_common_keyword_plan_common_proto_rawDescGZIP(), []int{7}
}

func (x *KeywordConcept) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KeywordConcept) GetConceptGroup() *ConceptGroup {
	if x != nil {
		return x.ConceptGroup
	}
	return nil
}

type ConceptGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string                                                            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type enums.KeywordPlanConceptGroupTypeEnum_KeywordPlanConceptGroupType `protobuf:"varint,2,opt,name=type,proto3,enum=google.ads.googleads.v10.enums.KeywordPlanConceptGroupTypeEnum_KeywordPlanConceptGroupType" json:"type,omitempty"`
}

func (x *ConceptGroup) Reset() {
	*x = ConceptGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v10_common_keyword_plan_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConceptGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConceptGroup) ProtoMessage() {}

func (x *ConceptGroup) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v10_common_keyword_plan_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConceptGroup.ProtoReflect.Descriptor instead.
func (*ConceptGroup) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v10_common_keyword_plan_common_proto_rawDescGZIP(), []int{8}
}

func (x *ConceptGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConceptGroup) GetType() enums.KeywordPlanConceptGroupTypeEnum_KeywordPlanConceptGroupType {
	if x != nil {
		return x.Type
	}
	return enums.KeywordPlanConceptGroupTypeEnum_UNSPECIFIED
}

var File_google_ads_googleads_v10_common_keyword_plan_common_proto protoreflect.FileDescriptor

var file_google_ads_googleads_v10_common_keyword_plan_common_proto_rawDesc = []byte{
	0x0a, 0x39, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x30, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x1a, 0x2b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x64, 0x73, 0x2f, 0x76, 0x31, 0x30, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f,
	0x76, 0x31, 0x30, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x47, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x30,
	0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x43, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x30, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x44, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73,
	0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x30, 0x2f, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73,
	0x2f, 0x76, 0x31, 0x30, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x5f, 0x6f, 0x66, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe2, 0x04, 0x0a,
	0x1c, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x35, 0x0a,
	0x14, 0x61, 0x76, 0x67, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x5f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x12, 0x61,
	0x76, 0x67, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x6a, 0x0a, 0x16, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x5f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64,
	0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x30, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x14, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x6c, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73,
	0x12, 0x7d, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61,
	0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x30,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6c,
	0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6c,
	0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x30, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x10, 0x63, 0x6f,
	0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01,
	0x01, 0x12, 0x3e, 0x0a, 0x1a, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x66, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x15, 0x6c, 0x6f, 0x77, 0x54, 0x6f, 0x70, 0x4f,
	0x66, 0x50, 0x61, 0x67, 0x65, 0x42, 0x69, 0x64, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x40, 0x0a, 0x1b, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x66,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x16, 0x68, 0x69, 0x67, 0x68, 0x54, 0x6f,
	0x70, 0x4f, 0x66, 0x50, 0x61, 0x67, 0x65, 0x42, 0x69, 0x64, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x88, 0x01, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x6c, 0x79, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x6f,
	0x66, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x6f,
	0x66, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x22, 0x8f, 0x01, 0x0a, 0x18, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5e,
	0x0a, 0x10, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x59, 0x65, 0x61, 0x72, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x79, 0x65, 0x61,
	0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x22, 0xcf, 0x01, 0x0a, 0x13, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x79,
	0x65, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x04, 0x79, 0x65, 0x61,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x30, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x4f, 0x66, 0x59, 0x65, 0x61, 0x72,
	0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x4f, 0x66, 0x59, 0x65, 0x61, 0x72,
	0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x10, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x6c, 0x79, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x01, 0x52, 0x0f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x79, 0x65, 0x61, 0x72,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x5f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x22, 0xb7, 0x01, 0x0a, 0x1b, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x97, 0x01, 0x0a, 0x16, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x61, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x30, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x50,
	0x6c, 0x61, 0x6e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x14, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22,
	0x88, 0x01, 0x0a, 0x21, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x63, 0x0a, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x52, 0x0e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x19, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x30, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x61, 0x0a, 0x12,
	0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x4b, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64,
	0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x30, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x22,
	0x78, 0x0a, 0x0e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x93, 0x01, 0x0a, 0x0c, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x6f,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x30, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x42,
	0xf6, 0x01, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61,
	0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x30,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x42, 0x16, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x45, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x30, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0xa2, 0x02, 0x03, 0x47, 0x41, 0x41, 0xaa, 0x02,
	0x1f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x41, 0x64, 0x73, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x41, 0x64, 0x73, 0x2e, 0x56, 0x31, 0x30, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0xca, 0x02, 0x1f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x41, 0x64, 0x73, 0x5c, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x41, 0x64, 0x73, 0x5c, 0x56, 0x31, 0x30, 0x5c, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0xea, 0x02, 0x23, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x41, 0x64, 0x73,
	0x3a, 0x3a, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x64, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x30,
	0x3a, 0x3a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_ads_googleads_v10_common_keyword_plan_common_proto_rawDescOnce sync.Once
	file_google_ads_googleads_v10_common_keyword_plan_common_proto_rawDescData = file_google_ads_googleads_v10_common_keyword_plan_common_proto_rawDesc
)

func file_google_ads_googleads_v10_common_keyword_plan_common_proto_rawDescGZIP() []byte {
	file_google_ads_googleads_v10_common_keyword_plan_common_proto_rawDescOnce.Do(func() {
		file_google_ads_googleads_v10_common_keyword_plan_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_ads_googleads_v10_common_keyword_plan_common_proto_rawDescData)
	})
	return file_google_ads_googleads_v10_common_keyword_plan_common_proto_rawDescData
}

var file_google_ads_googleads_v10_common_keyword_plan_common_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_google_ads_googleads_v10_common_keyword_plan_common_proto_goTypes = []interface{}{
	(*KeywordPlanHistoricalMetrics)(nil),                                         // 0: google.ads.googleads.v10.common.KeywordPlanHistoricalMetrics
	(*HistoricalMetricsOptions)(nil),                                             // 1: google.ads.googleads.v10.common.HistoricalMetricsOptions
	(*MonthlySearchVolume)(nil),                                                  // 2: google.ads.googleads.v10.common.MonthlySearchVolume
	(*KeywordPlanAggregateMetrics)(nil),                                          // 3: google.ads.googleads.v10.common.KeywordPlanAggregateMetrics
	(*KeywordPlanAggregateMetricResults)(nil),                                    // 4: google.ads.googleads.v10.common.KeywordPlanAggregateMetricResults
	(*KeywordPlanDeviceSearches)(nil),                                            // 5: google.ads.googleads.v10.common.KeywordPlanDeviceSearches
	(*KeywordAnnotations)(nil),                                                   // 6: google.ads.googleads.v10.common.KeywordAnnotations
	(*KeywordConcept)(nil),                                                       // 7: google.ads.googleads.v10.common.KeywordConcept
	(*ConceptGroup)(nil),                                                         // 8: google.ads.googleads.v10.common.ConceptGroup
	(enums.KeywordPlanCompetitionLevelEnum_KeywordPlanCompetitionLevel)(0),       // 9: google.ads.googleads.v10.enums.KeywordPlanCompetitionLevelEnum.KeywordPlanCompetitionLevel
	(*YearMonthRange)(nil),                                                       // 10: google.ads.googleads.v10.common.YearMonthRange
	(enums.MonthOfYearEnum_MonthOfYear)(0),                                       // 11: google.ads.googleads.v10.enums.MonthOfYearEnum.MonthOfYear
	(enums.KeywordPlanAggregateMetricTypeEnum_KeywordPlanAggregateMetricType)(0), // 12: google.ads.googleads.v10.enums.KeywordPlanAggregateMetricTypeEnum.KeywordPlanAggregateMetricType
	(enums.DeviceEnum_Device)(0),                                                 // 13: google.ads.googleads.v10.enums.DeviceEnum.Device
	(enums.KeywordPlanConceptGroupTypeEnum_KeywordPlanConceptGroupType)(0),       // 14: google.ads.googleads.v10.enums.KeywordPlanConceptGroupTypeEnum.KeywordPlanConceptGroupType
}
var file_google_ads_googleads_v10_common_keyword_plan_common_proto_depIdxs = []int32{
	2,  // 0: google.ads.googleads.v10.common.KeywordPlanHistoricalMetrics.monthly_search_volumes:type_name -> google.ads.googleads.v10.common.MonthlySearchVolume
	9,  // 1: google.ads.googleads.v10.common.KeywordPlanHistoricalMetrics.competition:type_name -> google.ads.googleads.v10.enums.KeywordPlanCompetitionLevelEnum.KeywordPlanCompetitionLevel
	10, // 2: google.ads.googleads.v10.common.HistoricalMetricsOptions.year_month_range:type_name -> google.ads.googleads.v10.common.YearMonthRange
	11, // 3: google.ads.googleads.v10.common.MonthlySearchVolume.month:type_name -> google.ads.googleads.v10.enums.MonthOfYearEnum.MonthOfYear
	12, // 4: google.ads.googleads.v10.common.KeywordPlanAggregateMetrics.aggregate_metric_types:type_name -> google.ads.googleads.v10.enums.KeywordPlanAggregateMetricTypeEnum.KeywordPlanAggregateMetricType
	5,  // 5: google.ads.googleads.v10.common.KeywordPlanAggregateMetricResults.device_searches:type_name -> google.ads.googleads.v10.common.KeywordPlanDeviceSearches
	13, // 6: google.ads.googleads.v10.common.KeywordPlanDeviceSearches.device:type_name -> google.ads.googleads.v10.enums.DeviceEnum.Device
	7,  // 7: google.ads.googleads.v10.common.KeywordAnnotations.concepts:type_name -> google.ads.googleads.v10.common.KeywordConcept
	8,  // 8: google.ads.googleads.v10.common.KeywordConcept.concept_group:type_name -> google.ads.googleads.v10.common.ConceptGroup
	14, // 9: google.ads.googleads.v10.common.ConceptGroup.type:type_name -> google.ads.googleads.v10.enums.KeywordPlanConceptGroupTypeEnum.KeywordPlanConceptGroupType
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_google_ads_googleads_v10_common_keyword_plan_common_proto_init() }
func file_google_ads_googleads_v10_common_keyword_plan_common_proto_init() {
	if File_google_ads_googleads_v10_common_keyword_plan_common_proto != nil {
		return
	}
	file_google_ads_googleads_v10_common_dates_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_google_ads_googleads_v10_common_keyword_plan_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeywordPlanHistoricalMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v10_common_keyword_plan_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoricalMetricsOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v10_common_keyword_plan_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonthlySearchVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v10_common_keyword_plan_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeywordPlanAggregateMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v10_common_keyword_plan_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeywordPlanAggregateMetricResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v10_common_keyword_plan_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeywordPlanDeviceSearches); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v10_common_keyword_plan_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeywordAnnotations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v10_common_keyword_plan_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeywordConcept); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v10_common_keyword_plan_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConceptGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_google_ads_googleads_v10_common_keyword_plan_common_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_google_ads_googleads_v10_common_keyword_plan_common_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_google_ads_googleads_v10_common_keyword_plan_common_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_google_ads_googleads_v10_common_keyword_plan_common_proto_msgTypes[5].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_ads_googleads_v10_common_keyword_plan_common_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_ads_googleads_v10_common_keyword_plan_common_proto_goTypes,
		DependencyIndexes: file_google_ads_googleads_v10_common_keyword_plan_common_proto_depIdxs,
		MessageInfos:      file_google_ads_googleads_v10_common_keyword_plan_common_proto_msgTypes,
	}.Build()
	File_google_ads_googleads_v10_common_keyword_plan_common_proto = out.File
	file_google_ads_googleads_v10_common_keyword_plan_common_proto_rawDesc = nil
	file_google_ads_googleads_v10_common_keyword_plan_common_proto_goTypes = nil
	file_google_ads_googleads_v10_common_keyword_plan_common_proto_depIdxs = nil
}
